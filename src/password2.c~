#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <getopt.h>
#include "../include/randrange.h"

#define MAXLENGTH    30
#define MAXSTRINGS   40

const char vowels[] = {'a', 'e', 'i', 'o', 'u'};
const char consonants[] = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'};
int rand_shift = 0;

char* getPwd(int length)
{
	static char buffer[MAXLENGTH];
	int  index, wordlength;
	int endnum;
	
	int vowflag = 0;
        int i, cx = 0;
	
	wordlength = length - 2;

	for (i = 0; i < wordlength; i++){
		if (vowflag == 0){
			index = randRange(5);
			cx += snprintf (buffer + cx, length + 1 - cx, "%c", vowels[index]);
			vowflag = 1;
		}

		else{
			index = randRange(21);
			cx += snprintf (buffer + cx, length + 1 - cx, "%c", consonants[index]);
			vowflag = 0;
		}
	}
	
	endnum = randRange(90) + 10;
	snprintf (buffer + cx, length + 1 - cx, "%d", endnum);

	return buffer;
}


int main(int argc, char **argv)
{
	
	int length, repetitions;
	int opt;
	int i;
	
	srand(time(0));
	while ((opt = getopt(argc, argv, "l:n:")) != -1) {
		switch (opt){
			case 'n':
				repetitions = atoi(optarg);
				break;
			case 'l':
				length = atoi(optarg);
				break;
			default:
				fprintf(stderr, "Usage: %s [-l length] [-n number of passwords]\n", argv[0]);
				exit (EXIT_FAILURE);
		}
	}
	
	for (i = 0; i < repetitions; i++)
		puts(getPwd(length));
		
	return 0;
}

	

